golang笔记：
1.golang import机制介绍：
    复杂系统会有各种包依赖引入，golang里面import大概流程是这样的：main主函数对包依赖进行分析，依次加载需要的包(只会加载一次),加载后，main在初始化全局变量，
 然后在执行初始化函数，最后在执行main函数。其他包也是这样的：先加载包依赖，然后初始化包内的全局变量，然后执行初始化函数，最后加载其他内容...
2.golang import用法：
    2.1多个包引入，需要加括号，例如：
        import (
            "fmt"
            "time"
        )
    2.2 别名引入,如何两个包引入后，最后一个包名称一致，就会引起冲突，所以可以使用别名加以区分。
        import(
            "a/logging"
            "b/logging"
        )
        如上就就会导致冲突，所以需要这样：
        import (
            la "a/logging"
            lb "b/logging"
        )
        在调用的时候la.logging就表示a/logging,lb.logging就代表b/logging
     2.3 .引入
        import(
            . "fmt"
        )
        像上面用.引入后，我们在使用fmt包里面导出的变量或者函数时，可以直接使用，例如：Println("aa"),而不再需要像这样fmt.Println("a"),在函数前加入包名了，
     相当于省略了包名,一般不建议使用这种方式
     2.4 _引入
        import(
            _ "a/logging"
        )
        _在golang里面表示空操作符，这里这样引入后，程序只是执行了a/logging里面的初始化函数，而实际并不使用a/logging里面的任何导出函数或者变量，所有，如果
        需要引入一个包，但是又不需要使用这个包里面的任何程序，就可以这样引入，从而golang在编译的时候就不报错
3.golang中的关键字
    程序申明：import package
    程序实体申明和定义：const,chan,func,interface,map,struct,type,var
    程序流程控制：go,select,break,case,continue,default,defer,else,fallthrough,for,if,goto,range,return,switch
    25个。。
4.基本数据类型：
        bool,string,byte,rune,int/uint,int8/uint8,int16/uint16,int32/uint32,int64/uint64,float32,float64,complex64,complex128
5.复合数据类型：
        array,slice,map,struct,interface,function,channel,pointer
6.切片
    6.1声明
        a := []int{1,2,3}
        a2 := make([]int, 4, 8)//声明长度为4，容量为8的切片a2
        var c []int //nil切片 和nil相等
        d := []int{}//空切片
    6.2修改
        a[1] = 3
    6.3追加
        a = append(a, 4)//把4追加到a里面,追加一定要赋值给a，如果超出a的容量，就会扩容，产生新变量.
        b := []int{5,6}
        a = append(a, b...)//把切片b中的元素追加到a里面
        //b[2] = 7//这样操作会报错，因为b的长度是2，不能超出范围赋值第三个元素，只能通过append来追加元素，生成一个新的切片
    6.4删除
        fmt.Println(a[1:2])//[2]  从0开始,包含左边不包含右边
        f = a[:3] //只取a中前三个元素，其他删除
    6.5长度和容量    
        len(a)//a的长度
        cap(a)//a的容量
    6.6遍历
        //能用for range遍历就用for range，别用for循环遍历.
        for _,v := range a{
            fmt.Println(v)
        }
    6.7值类型
        切片是地址传递
        s1 := []int{1,2,3,4,5}
        s2 := s1[:2]
        fmt.Println(s2) //[1,2]
        s1[1] = 4//修改s1的值
        fmt.Println(s2)//s2变化 [4,2]
7 函数
    7.1函数参数
        支持多参数
            func test(a int, b string){}
            func test(a, b int) int {}
        不定参数(不定参数需要放最后面,参数再函数内已slice的形式存在)
            func test(a, b int, c ...int) {}
        值传递&引用传递
            默认使用值传递，如果对象比较大，可以用显式引用传递或隐式引用传递
            参数如果是slice，那么如果再函数内修改此slice,也会修改原始slice值
            func main () {
                s := []int{1,2,3}
                twice(s)
                fmt.Println(s)//2,4,6
            }
            func twice(s []int) {
                for i,v := range s {
                    s[i] = 2 * v
                }
            }

    7.2函数返回值
        单个返回值
            func test(a, b int) int {}
            func addInt(a, b int, c ...int) (base int) {
            	base = a + b
            	for _,v := range c {
            		base += v
            	}
            	return //如果定义的时候加了(base int) 那么函数最后可以不用return base。可去掉base
            }
        多返回值
            func test(a, b int) (int, err) {}
            func test(a, b int) (total int, error err) {}//同理可参数上面
    7.3匿名函数
        var a = func(b int) int {return b + 3}
        fmt.Println(a(5))//8
    7.4闭包函数
        匿名函数引用函数外部变量，就成了闭包函数
        func main() {
            a := 3
            defer func() {
                fmt.Println(a + 3)
            }
        }